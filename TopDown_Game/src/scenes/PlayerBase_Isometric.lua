---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by enki.
--- DateTime: 3/28/24 10:27â€¯PM
---

-- Add the directory containing the Player.lua module to the Lua package path
-- Path should be relative to the runtime directory of the executable
package.path = package.path .. ";../TopDown_Game/src/actors/?.lua"

-- Now require the Player module without specifying the '.lua' extension
local player = require("Player")

-- Binding movement functions to key events
registerKeyDownCallback(KeyCode.W, function() player.moveUp(KeyCode.W) end)
registerKeyUpCallback(KeyCode.W, function() player.stopMoveUp(KeyCode.W) end)

registerKeyDownCallback(KeyCode.S, function() player.moveDown(KeyCode.S) end)
registerKeyUpCallback(KeyCode.S, function() player.stopMoveDown(KeyCode.S) end)

registerKeyDownCallback(KeyCode.A, function() player.moveLeft(KeyCode.A) end)
registerKeyUpCallback(KeyCode.A, function() player.stopMoveLeft(KeyCode.A) end)

registerKeyDownCallback(KeyCode.D, function() player.moveRight(KeyCode.D) end)
registerKeyUpCallback(KeyCode.D, function() player.stopMoveRight(KeyCode.D) end)

function update(deltaTime)
    --logMessage("[INFO] TopDown_Game script called update() with deltaTime: " .. deltaTime);
    player.update(deltaTime);
end

MainMenuState = {}

function MainMenuState.enter()
    print("[INFO] Entering MainMenuState")
end

function MainMenuState.exit()
    print("Exiting MainMenuState")
end

function MainMenuState.update(deltaTime)
    -- Update logic here
end

function MainMenuState.render()
    -- Rendering logic here
end

GameplayState = {}

function GameplayState.enter()
    print("[INFO] Entering GameplayState 1")
end

function GameplayState.exit()
    print("Exiting GameplayStateState")
    stopAllActiveAudioEvents();

end

function GameplayState.update(deltaTime)
    -- Update logic here
end

function GameplayState.render()
    -- Rendering logic here
end



-- Register the state with a global or a specific Lua registry for states
-- This ensures GameStateRegistry is created if it doesn't exist
GameStateRegistry = GameStateRegistry or {}
GameStateRegistry["MainMenuState"] = MainMenuState

GameStateRegistry = GameStateRegistry or {}
GameStateRegistry["GameplayState"] = GameplayState


--Function to create backgroundPainting
function createBackgroundPainting()
    -- Create background painting entity
    backgroundPainting = createEntity()
    logMessage("[INFO] Lua created Entity: " .. backgroundPainting);

    -- Attach components to the entity
    attachComponent(backgroundPainting, ComponentType.Transform)
    attachComponent(backgroundPainting, ComponentType.Renderable)
    attachComponent(backgroundPainting, ComponentType.Sprite)
    attachComponent(backgroundPainting, ComponentType.Texture)
    attachComponent(backgroundPainting, ComponentType.Audio);
    setBank(backgroundPainting, "../TopDown_Game/assets/audio/Desktop/World.bank")



    -- Set sprite, texture, render layer, and initial transform
    setSprite(backgroundPainting, 0, 0, 1280, 720)
    setTexture(backgroundPainting, "../TopDown_Game/assets/background_Future_Magic_Forest_ISOGRAPHIC.png")
    setRenderLayer(backgroundPainting, RenderLayer.background)
    setTransform(backgroundPainting, 0, 0)
end



-- Function to create collision boxes
function createBoundaryBox(posX, posY, width, height)
    local boundaryBox = createEntity();
    attachComponent(boundaryBox, ComponentType.Transform);
    attachComponent(boundaryBox, ComponentType.Physics);
    attachComponent(boundaryBox, ComponentType.Collider);
    attachComponent(boundaryBox, ComponentType.Sprite);
    setTransform(boundaryBox, posX, posY);
    setBoundaryBox(boundaryBox, posX, -posY, width, height );
    setSprite(boundaryBox, posX, posY, 32, 32)

end






-- constructLevel is called from Core. All level design should go in constructLevel so hot reloading the Lua script
-- updates all entities
function constructLevel()
    logMessage("[INFO] Contructing level");
    loadBank("../TopDown_Game/assets/audio/Desktop/Master.bank");
    loadBank("../TopDown_Game/assets/audio/Desktop/Master.strings.bank");
    createBackgroundPainting();
    loadEntityBank(backgroundPainting);
    playEvent("event:/world_music_background");
    createBoundaryBox(430, -30, 60, 40);
    playerUID = player.createPlayerEntity(615, 600, 96, 128);
    loadEntityBank(playerUID);
    logMessage("[INFO] Level Constructed");
end
